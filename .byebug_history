c
Label.select{|x| x.topics.count > 0 }
Label.select{|x| x.topics.count == 0 }
Label.count
@user_l.topics
c
@admin_l.topics
@admin_l.topics.delete(t1)
@admin_l.topics.delete(d1)
t1 = @admin_l.topics.first
@admin_l.topics
@admin_l.topics.first.destroy
@admin_l.topics
@admin_l.topics.first.delete
LabelTopic.count
LabelsTopic.count
@admin_l.topics
@admin_l
exit
@admin_l.labels_topics.first.delete
@admin_l.labels_topics.first.destroy
@admin_l.labels_topics.first
@admin_l.labels_topics.count
@admin_l.labels_topics
@admin_l.labelstopics
exit
EXIT
c
params
c
params
exit
LabelsTopic.all[-1].topic
LabelsTopic.all[-1].label
LabelsTopic.all[-1]
LabelsTopi.all[-1]
LabelsTopic.count
Topic.all[2].labels
Topic.all[2]
Topic.all[1]
Topic.all[0]
Topic.all[]
Topic.count
l1.topics
l1 = Label.all[0]
Label.all[0]
Label.all[1]
Label.count
exit
lab
c
lab
c
lab
c
lab
c
lab
c
lab
checkery
default_label
exit
params
exit
default_label
exit
controller_name
controller_nam
c
topic.labels
topic
exit
Topic.first.labels
Topic.first
topic.labels
topic
c
params
c
puts page.body
exit
Topic.all[1]
Topic.all[0]
Topic[0]
Topic.count
first_topic
puts page.body
c
params
exit
params
c
first_topic
puts page.body
c
exit
@style
exit
stud_answer
c
@question
c
@question
@question.update_attributes(multi_params(params["questions"]["0"]))
if @question.update_attributes(multi_params(params["questions"]["0"]))
@question.extent = params[:extent]
@question = Question.find(params[:id])
@question.extent = params[:extent]
params[:extent]
params
c
@extent=="private"
@extent=="public"
c
@extent
exit
@extent
exit
params
@question.errors
@question.update_attributes(multi_params(params["questions"]["0"]))
c
params
exit
@new_question_2
@new_questions_2
@new_question
c
@new_question
c
this_choice
c
this_choice
exit
these_params["choices"][correct_num.to_i]
these_params["choices"][correct_num]
these_params["choices"][2]
correct_num
exit
n
choice_array
exit
choice_array
c
params
exit
@new_question
exit
stud_answer << answer_to_save
answer_to_save = @question.read_attribute(:"choice_#{this_answer}")
stud_answer
@question.read_attribute(:"choice_#{this_answer}")
@question
c
exit
puts page.body
c
@question
c
@question
@style
c
@style
c
exit
c
exit
@question
c
@question
c
@question
c
@question
exit
@fill_q
c
@fill_q
exit
@style
exit
Question.all.order(:prompt).each do |quest| puts quest.prompt end
Question.all.each do |quest| puts quest.prompt end
Question.find(281110143)
Question.count
Question.where(:prompt => "A different_user_private")
c
Question.where(:prompt => "A different_user_private")
@other_teacher_private_q
c
Question.where(:prompt => "A different_user_private")
search
where("#{whichParam} LIKE ?" , "%#{search}%")
ActiveRecord::Base.connection.adapter_name
whichParam
results
exit
third_list = second_list.search(params[:search], params[:whichParam])
second_list.count
second_list
third_list
initial_list
exit
params
c
exit
third_list
initial_list
initial_list.count
c
@other_teacher_private_q
c
params
params[:label_ids]
params[:label_ids
[:label_ids]
initial_list
exit
@other_teacher_private_q.prompt
@other_teacher_private_q
c
@admin_q
puts page.body
exit
Seminar.all.order(:name)
Seminar.all.sort_by(:name)
SeminarTeacher.where(:user => self, :can_edit => true).map(&:seminar).sort_by(&:name)
SeminarTeacher.where(:user => self, :can_edit => true).map(&:seminar)
SeminarTeacher.where(:user => self, :can_edit => true).count
SeminarTeacher.where(:user => self).count
SeminarTeacher.count
c
puts page.body
first_page_of_seminars.count
first_page_of_seminars
puts page.body
exit
@seminars.where.not(:owner => nil).count
@seminars.where.not(:owner => nil)
@seminars.count
c
puts page.body
c
current_user
exit
current_user
@seminar
exit
Seminar.all.each do |seminar| puts seminar.name end
Seminar.where(:name => nil).count
Seminar.count
exit
seminar.teachers
seminar
c
